import type { Metadata } from "next";
import localFont from "next/font/local";
import "#/styles/globals.css";

const danaRegular = localFont({
  src: "./fonts/dana-regular.woff",
  variable: "--font-dana-regular",
  weight: "400",
});
const danaThin = localFont({
  src: "./fonts/dana-thin.woff",
  variable: "--font-dana-thin",
  weight: "100",
});
const danaLight = localFont({
  src: "./fonts/dana-light.woff",
  variable: "--font-dana-light",
  weight: "300",
});
const danaMedium = localFont({
  src: "./fonts/dana-medium.woff",
  variable: "--font-dana-medium",
  weight: "500",
});
const danaExtrabold = localFont({
  src: "./fonts/dana-extrabold.woff",
  variable: "--font-dana-extrabold",
  weight: "800",
});
const danaExtralight = localFont({
  src: "./fonts/dana-extralight.woff",
  variable: "--font-dana-extralight",
  weight: "200",
});
const danaBold = localFont({
  src: "./fonts/dana-bold.woff",
  variable: "--font-dana-bold",
  weight: "700",
});
const danaBlack = localFont({
  src: "./fonts/dana-black.woff",
  variable: "--font-dana-black",
  weight: "900",
});
const danaDemibold = localFont({
  src: "./fonts/dana-demibold.woff",
  variable: "--font-dana-demibold",
  weight: "600",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export async function generateStaticParams() {
  return [{ lang: 'en' }, { lang: 'fa' }];
}

type RootLayoutProps = {
  params: any
  children: React.ReactNode
};

export default function RootLayout({ params, children }: RootLayoutProps) {
  const { lang } = params;
  return (
    <html lang={lang}>
      <body
        className={`
          ${danaRegular.variable} 
          ${danaThin.variable} 
          ${danaLight.variable} 
          ${danaMedium.variable} 
          ${danaExtrabold.variable} 
          ${danaExtralight.variable} 
          ${danaBold.variable} 
          ${danaBlack.variable} 
          ${danaDemibold.variable} 
          antialiased`}
      >
        {children}
      </body>
    </html>
  );
}
